let Teacher,Learner,Topic,Gender,Joi,fs,stringify,path;_8ba‍.x([["createTeacher",()=>createTeacher],["getTeacher",()=>getTeacher],["updateTeacher",()=>updateTeacher],["deleteTeacher",()=>deleteTeacher],["exportTeachers",()=>exportTeachers]]);_8ba‍.w("../models",[["Teacher",["Teacher"],function(v){Teacher=v}],["Learner",["Learner"],function(v){Learner=v}],["Topic",["Topic"],function(v){Topic=v}],["Gender",["Gender"],function(v){Gender=v}]]);_8ba‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_8ba‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_8ba‍.w("csv-stringify",[["stringify",["stringify"],function(v){stringify=v}]]);_8ba‍.w("../resources/link",[["default",["path"],function(v){path=v}]]);




const teacherValidation = Joi.object({
  name: Joi.string().min(3).max(20).required().messages({
    'string.min': 'Name length must be at least 3 characters long!',
    'string.max': 'Name length must be less than or equal to 20 characters long!'
  }),
  gender: Joi.string(),
})

       const createTeacher = async (req, res) => {
  try {
    const { error } = await teacherValidation.validate({ name: req.body.name })
    if (error) {
      return res.status(400).json({
        message: error.details ? error.details[0].message : error.message
      })
    }
    const teacher = await Teacher.create({
      ...req.body,
    })
    const teacherFind = await Teacher.findOne({
      where: {
        id: teacher.id,
      },
      include: [
        {
          model: Gender,
        },
        {
          model: Topic,
        },
      ],
    })

    // const learner = await Learner.findAll({
    //   where: {
    //     id: {
    //       [Op.in]: req.body.learner
    //     }
    //   },
    //   attributes: ["id"]
    // })
    // const learnerIds = learner.map(i => i.id)
    // const teacherToBeAssignLearner = await Teacher.findOne({
    //   where: {
    //     id: teacher.id
    //   },
    //   include: {
    //     model: Learner,
    //     as: "learner"
    //   }
    // })
    // await teacherToBeAssignLearner.addLearner(learnerIds, { through: "Learner_Teachers" })
    // const createdTeacher = await Teacher.findOne({
    //   where: { id: teacher.id },
    //   include: {
    //     model: Learner,
    //     as: "learner"
    //   }
    // })
    // console.log("teacherfind", createdTeacher)

    return res.status(200).json({ teacher: 'teacher created success!', data: teacherFind })
  } catch (err) {
    _8ba‍.g.console.log("error", err)
    return res.status(400).json({ error: 'Something went wrong!' })
  }
}

       const getTeacher = async (req, res) => {
  try {
    const { id } = req.params;
    const teacher = await Teacher.findOne({
      where: {
        id: id,
      },
      include: [
        {
        model: Learner,
        as: "learner"
        },
        {
          model: Gender,
        },
        {
          model: Topic,
        },
      ]
    })
    return res.status(200).json({ data: teacher })
  } catch (err) {
    return  res.status(200).json({ error: "something went wrong!" })
  }
}

       const updateTeacher = async (req, res) => {
   try {
     const { id } = req.params;
     await Teacher.update(req.body, {
       where: {
         id: id
       }
     })
     const teacher = await Teacher.findOne({
       where: {
         id: id
       }
     })
     if (!teacher) {
       return res.status(201).json({ message: "teacher not found" })
     }
     return  res.status(200).json({ message: "teacher updated success!", data: teacher })
   } catch (err) {
     _8ba‍.g.console.log("err", err)
     return  res.status(200).json({ error: "something went wrong!" })
   }
}

       const deleteTeacher = async (req, res) => {
  try {
    const { id } = req.params;
    await Teacher.destroy({
      where: {
        id: id
      }
    })
    return res.status(200).json({ message: "teacher hide success!" })
  } catch(err) {
    _8ba‍.g.console.log("err", err)
    return  res.status(200).json({ error: "something went wrong!" })
  }
}


       const exportTeachers = async (req, res) => {
  try {
    // const link = "http://localhost:3333/resources/teacher-list/teacher-data.csv"
    const link = process.env.Link
    const teachers = await Teacher.findAll({
      attributes: [ 'id', 'name', 'profession' ],
      raw: true,
    })
    if (!fs.existsSync('./resources/teacher-list')){
      fs.mkdirSync('./resources/teacher-list');
    }
    _8ba‍.g.console.log("link",link)
    stringify(teachers, {
      header: true
    }, function (err, output) {
      fs.writeFile('./resources/teacher-list/teacher-data.csv', output, {}, function (){});
    })
    return res.status(200).json({ link: link })
  } catch (err) {
    _8ba‍.g.console.log('err', err)
  }
}