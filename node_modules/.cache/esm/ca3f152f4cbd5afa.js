let Learner,Teacher,Gender,Image,Joi,path,fs;_4cb‍.x([["createLearner",()=>createLearner],["getLearner",()=>getLearner],["updateLearner",()=>updateLearner],["deleteLearner",()=>deleteLearner]]);_4cb‍.w("../models",[["Learner",["Learner"],function(v){Learner=v}],["Teacher",["Teacher"],function(v){Teacher=v}],["Gender",["Gender"],function(v){Gender=v}],["Image",["Image"],function(v){Image=v}]]);_4cb‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_4cb‍.w("path",[["default",["path"],function(v){path=v}]]);_4cb‍.w("fs",[["default",["fs"],function(v){fs=v}]]);




const learnerValidation = Joi.object({
  name: Joi.string().min(3).max(20).required().messages({
    'string.min': 'Name length must be at least 3 characters long!',
    'string.max': 'Name length must be less than or equal to 20 characters long!'
  }),
  gender: Joi.string(),
})

       const createLearner = async (req, res) => {
  try {
    const { error } = await learnerValidation.validate({ name: JSON.parse(req.body.data).name })
    if (error) {
      return res.status(400).json({
        message: error.details ? error.details[0].message : error.message
      })
    }

   let shouldSavePath;
    for (const i of req.files) {
      const filePath = path.join(`resources/students-images/${i.originalname}`)
      shouldSavePath = `${process.env.API_URL}/${filePath}`
      fs.writeFile(filePath, i.buffer, {}, function () {
      })
    }

    const learner = await Learner.create({
      ...JSON.parse(req.body.data),
      filePath: shouldSavePath
    })

    const learnerFind = await Learner.findOne({
      where: {
        id: learner.id
      },
      include: [{
        model: Gender
      },
        {
        model: Image
      },

      ]
    })
    return res.status(200).json({ learner: 'learner created success!', data: learnerFind })
  } catch (err) {
    _4cb‍.g.console.log("err", err)
    return res.status(500).json({ error: 'Something went wrong!' })
  }
}

       const getLearner = async (req, res) => {
  try {
    const { id } = req.params;
    const learner = await Learner.findOne({
      where: {
        id: id
      },
      include: [{
        model: Teacher,
        as: "teacher"
      },
        {
          model: Gender
        } ,
        {
          model: Image
        }
      ]
    })
    return res.status(200).json({ data: learner })
  } catch (err) {
    return res.status(500).json({ error: 'Something went wrong!' })
  }
}

       const updateLearner = async (req, res) => {
  try {
    const { id } = req.params;
    await Learner.update(req.body, {
      where: {
        id: id
      }
    })
    const learner = await Learner.findOne({
      where: {
        id: id
      }
    })
    if (!learner) {
      return res.status(200).json({ message: "learner is not found" })
    }
    return res.status(200).json({ message: 'learner updated success!', data: learner })
  } catch (err) {
    _4cb‍.g.console.log("err", err)
    return res.status(500).json({ error: 'Something went wrong!' })
  }
}

       const deleteLearner = async (req, res) => {
  try {
    const { id } = req.params;
    await Learner.destroy({
      where: {
        id: id
      }
    })
    res.status(200).json({ message: "learner hide success!" })
  } catch (err) {
    _4cb‍.g.console.log("err", err)
    return res.status(500).json({ error: 'Something went wrong!' })
  }
}





// const teacher = await Teacher.findAll({
//   where: {
//     id: {
//       [Op.in]: req.body.teacher
//     }
//   },
//   attributes: ["id"]
// })
//
// const teacherIds = teacher.map(i => i.id)
// const learnerToBeAssignTeacher = await Learner.findOne({
//   where: {
//     id: learner.id
//   },
//   include: {
//     model: Teacher,
//     as: "teacher"
//   }
// })
// await learnerToBeAssignTeacher.addTeacher(teacherIds, { through: "Learner_Teachers" })
// const createdLearner = await  Learner.findOne({
//   where: { id: learner.id },
//   include: {
//     model: Teacher,
//     as: "teacher"
//   }
// })